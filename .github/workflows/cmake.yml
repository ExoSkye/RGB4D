name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  Init:
    runs-on: ubuntu-latest
    steps:
    - name: Create Build Tag
      run: |
        export BUILD_TAG=build-$(date -u +'%Y%m%d%H%M')
        echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
        echo -n $BUILD_TAG > tag
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: tag
        path: tag

  Build:
    name: Build
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: ["Release", "Debug"]

    runs-on: ${{ matrix.os }}

    needs: Init

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_IDE=OFF

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }}
      
    - name: Rename ouptut file (Windows)
      if: ${{ matrix.os == windows-latest }}
      run: cmake -E rename ${{github.workspace}}/build/PPEN_Interpreter.exe ${{github.workspace}}/build/PPEN_Interpreter_Windows_${{ matrix.build_type }}.exe
      
    - name: Rename ouptut file (Linux)
      if: ${{ matrix.os == ubuntu-latest }}
      run: cmake -E rename ${{github.workspace}}/build/PPEN_Interpreter ${{github.workspace}}/build/PPEN_Interpreter_Linux_${{ matrix.build_type }}
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ matrix.os }}_${{ matrix.build_type }}
        path: PPEN_Interpreter*
      
  Release:
    name: Release
    runs-on: ubuntu-latest
    needs: Build
    env:
      BUILD_TAG:
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: dist
    - name: Get Package Info
      run: |
        echo "BUILD_TAG=$(cat dist/tag/tag)" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.BUILD_TAG }}
        release_name: ${{ env.BUILD_TAG }}
        draft: false
        prerelease: false
    - name: Upload Release Assets (Windows Debug Build)
      id: upload-release-asset-win-debug
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: PPEN_Interpreter_Windows_Debug.exe
        asset_path: dist/windows-latest_Debug/PPEN_Interpreter_Windows_Debug.exe
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Upload Release Assets (Windows Release Build)
      id: upload-release-asset-win-release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: PPEN_Interpreter_Windows_Release.exe
        asset_path: dist/windows-latest_Release/PPEN_Interpreter_Windows_Release.exe
        asset_content_type: application/vnd.microsoft.portable-executable
        
    - name: Upload Release Assets (Linux Debug Build)
      id: upload-release-asset-linux-debug
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: PPEN_Interpreter_Linux_Debug
        asset_path: dist/ubuntu-latest_Debug/PPEN_Interpreter_Linux_Debug
        asset_content_type: application/x-executable
    - name: Upload Release Assets (Linux Release Build)
      id: upload-release-asset-linux-release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: PPEN_Interpreter_Linux_Release
        asset_path: dist/ubuntu-latest_Release/PPEN_Interpreter_Linux_Release
        asset_content_type: application/x-executable
    

      
